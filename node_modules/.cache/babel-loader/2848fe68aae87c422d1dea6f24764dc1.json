{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar fileProcessor = function fileProcessor(formio, config) {\n  return function (file, options) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      var xhr = new XMLHttpRequest(); // Fire on network error.\n\n      xhr.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fire on network abort.\n\n      xhr.onabort = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fired when the response has made it back from the server.\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          var mimetype = xhr.getResponseHeader('Content-Type') || file.type;\n          resolve(new File([xhr.response], file.name, {\n            type: mimetype\n          }));\n        } else {\n          reject(xhr.response || 'Unable to process file');\n        }\n      }; // Set the onabort error callback.\n\n      xhr.onabort = reject;\n      xhr.open('POST', config.url);\n      var token = formio.getToken();\n      if (token) {\n        xhr.setRequestHeader('x-jwt-token', token);\n      }\n      xhr.responseType = 'arraybuffer';\n      var data = new FormData();\n      data.append('file', file);\n      data.append('processorOptions', JSON.stringify(config.options || {}));\n      data.append('options', JSON.stringify(options || {})); // Get the request and send it to the server.\n\n      xhr.send(data);\n    });\n  };\n};\nvar _default = fileProcessor;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_nativePromiseOnly","_interopRequireDefault","require","obj","__esModule","fileProcessor","formio","config","file","options","resolve","reject","xhr","XMLHttpRequest","onerror","err","networkError","onabort","onload","status","mimetype","getResponseHeader","type","File","response","name","open","url","token","getToken","setRequestHeader","responseType","data","FormData","append","JSON","stringify","send","_default"],"sources":["D:/task/node_modules/formiojs/providers/processor/fileProcessor.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar fileProcessor = function fileProcessor(formio, config) {\n  return function (file, options) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      var xhr = new XMLHttpRequest(); // Fire on network error.\n\n      xhr.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fire on network abort.\n\n\n      xhr.onabort = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fired when the response has made it back from the server.\n\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          var mimetype = xhr.getResponseHeader('Content-Type') || file.type;\n          resolve(new File([xhr.response], file.name, {\n            type: mimetype\n          }));\n        } else {\n          reject(xhr.response || 'Unable to process file');\n        }\n      }; // Set the onabort error callback.\n\n\n      xhr.onabort = reject;\n      xhr.open('POST', config.url);\n      var token = formio.getToken();\n\n      if (token) {\n        xhr.setRequestHeader('x-jwt-token', token);\n      }\n\n      xhr.responseType = 'arraybuffer';\n      var data = new FormData();\n      data.append('file', file);\n      data.append('processorOptions', JSON.stringify(config.options || {}));\n      data.append('options', JSON.stringify(options || {})); // Get the request and send it to the server.\n\n      xhr.send(data);\n    });\n  };\n};\n\nvar _default = fileProcessor;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAIxB,IAAIC,kBAAkB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAE/E,SAASD,sBAAsB,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEJ,OAAO,EAAEI;EAAI,CAAC;AAAE;AAE9F,IAAIE,aAAa,GAAG,SAASA,aAAa,CAACC,MAAM,EAAEC,MAAM,EAAE;EACzD,OAAO,UAAUC,IAAI,EAAEC,OAAO,EAAE;IAC9B,OAAO,IAAIT,kBAAkB,CAACD,OAAO,CAAC,UAAUW,OAAO,EAAEC,MAAM,EAAE;MAC/D,IAAIC,GAAG,GAAG,IAAIC,cAAc,EAAE,CAAC,CAAC;;MAEhCD,GAAG,CAACE,OAAO,GAAG,UAAUC,GAAG,EAAE;QAC3BA,GAAG,CAACC,YAAY,GAAG,IAAI;QACvBL,MAAM,CAACI,GAAG,CAAC;MACb,CAAC,CAAC,CAAC;;MAGHH,GAAG,CAACK,OAAO,GAAG,UAAUF,GAAG,EAAE;QAC3BA,GAAG,CAACC,YAAY,GAAG,IAAI;QACvBL,MAAM,CAACI,GAAG,CAAC;MACb,CAAC,CAAC,CAAC;;MAGHH,GAAG,CAACM,MAAM,GAAG,YAAY;QACvB,IAAIN,GAAG,CAACO,MAAM,IAAI,GAAG,IAAIP,GAAG,CAACO,MAAM,GAAG,GAAG,EAAE;UACzC,IAAIC,QAAQ,GAAGR,GAAG,CAACS,iBAAiB,CAAC,cAAc,CAAC,IAAIb,IAAI,CAACc,IAAI;UACjEZ,OAAO,CAAC,IAAIa,IAAI,CAAC,CAACX,GAAG,CAACY,QAAQ,CAAC,EAAEhB,IAAI,CAACiB,IAAI,EAAE;YAC1CH,IAAI,EAAEF;UACR,CAAC,CAAC,CAAC;QACL,CAAC,MAAM;UACLT,MAAM,CAACC,GAAG,CAACY,QAAQ,IAAI,wBAAwB,CAAC;QAClD;MACF,CAAC,CAAC,CAAC;;MAGHZ,GAAG,CAACK,OAAO,GAAGN,MAAM;MACpBC,GAAG,CAACc,IAAI,CAAC,MAAM,EAAEnB,MAAM,CAACoB,GAAG,CAAC;MAC5B,IAAIC,KAAK,GAAGtB,MAAM,CAACuB,QAAQ,EAAE;MAE7B,IAAID,KAAK,EAAE;QACThB,GAAG,CAACkB,gBAAgB,CAAC,aAAa,EAAEF,KAAK,CAAC;MAC5C;MAEAhB,GAAG,CAACmB,YAAY,GAAG,aAAa;MAChC,IAAIC,IAAI,GAAG,IAAIC,QAAQ,EAAE;MACzBD,IAAI,CAACE,MAAM,CAAC,MAAM,EAAE1B,IAAI,CAAC;MACzBwB,IAAI,CAACE,MAAM,CAAC,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAAC7B,MAAM,CAACE,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;MACrEuB,IAAI,CAACE,MAAM,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAAC3B,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;MAEvDG,GAAG,CAACyB,IAAI,CAACL,IAAI,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,IAAIM,QAAQ,GAAGjC,aAAa;AAC5BR,OAAO,CAACE,OAAO,GAAGuC,QAAQ"},"metadata":{},"sourceType":"script"}