{"ast":null,"code":"import _slicedToArray from \"D:/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"D:\\\\task\\\\src\\\\store\\\\auth-context.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar AuthContext = /*#__PURE__*/React.createContext({\n  isloggedIn: false,\n  onLogout: function onLogout() {},\n  onLogin: function onLogin() {}\n});\nexport var AuthContextProvider = function AuthContextProvider(props) {\n  _s();\n  var _useState = useState(function () {\n      return localStorage.getItem(\"LoggedIn\") === \"true\";\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggedIn = _useState2[0],\n    setIsLoggedIn = _useState2[1];\n  useEffect(function () {\n    if (!isLoggedIn) localStorage.removeItem(\"LoggedIn\");\n  }, [isLoggedIn]);\n  var loginHandler = function loginHandler(email, password) {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    setIsLoggedIn(true);\n    localStorage.setItem(\"LoggedIn\", \"true\");\n  };\n  var logoutHandler = function logoutHandler() {\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, _this);\n};\n_s(AuthContextProvider, \"iw4YqY79GUePKTs7/KiFztWCNhg=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","AuthContext","createContext","isloggedIn","onLogout","onLogin","AuthContextProvider","props","localStorage","getItem","isLoggedIn","setIsLoggedIn","removeItem","loginHandler","email","password","setItem","logoutHandler","children"],"sources":["D:/task/src/store/auth-context.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nconst AuthContext = React.createContext({\n  isloggedIn: false,\n  onLogout: () => {},\n  onLogin: () => {}\n});\n\nexport const AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\n    return localStorage.getItem(\"LoggedIn\") === \"true\";\n  });\n\n  useEffect(() => {\n    if (!isLoggedIn) localStorage.removeItem(\"LoggedIn\");\n  }, [isLoggedIn]);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    setIsLoggedIn(true);\n    localStorage.setItem(\"LoggedIn\", \"true\");\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: isLoggedIn,\n        onLogout: logoutHandler,\n        onLogin: loginHandler\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AACnD,IAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAC;EACtCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,oBAAM,CAAC,CAAC;EAClBC,OAAO,EAAE,mBAAM,CAAC;AAClB,CAAC,CAAC;AAEF,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIC,KAAK,EAAK;EAAA;EAC5C,gBAAoCR,QAAQ,CAAC,YAAM;MACjD,OAAOS,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,MAAM;IACpD,CAAC,CAAC;IAAA;IAFKC,UAAU;IAAEC,aAAa;EAIhCX,SAAS,CAAC,YAAM;IACd,IAAI,CAACU,UAAU,EAAEF,YAAY,CAACI,UAAU,CAAC,UAAU,CAAC;EACtD,CAAC,EAAE,CAACF,UAAU,CAAC,CAAC;EAEhB,IAAMG,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAEC,QAAQ,EAAK;IACxC;IACA;IACAJ,aAAa,CAAC,IAAI,CAAC;IACnBH,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;EAC1C,CAAC;EAED,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAS;IAC1BN,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,oBACE,QAAC,WAAW,CAAC,QAAQ;IACnB,KAAK,EAAE;MACLD,UAAU,EAAEA,UAAU;MACtBN,QAAQ,EAAEa,aAAa;MACvBZ,OAAO,EAAEQ;IACX,CAAE;IAAA,UAEDN,KAAK,CAACW;EAAQ;IAAA;IAAA;IAAA;EAAA,SACM;AAE3B,CAAC;AAAC,GA/BWZ,mBAAmB;AAAA,KAAnBA,mBAAmB;AAiChC,eAAeL,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}