{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setXhrHeaders = exports.default = void 0;\nrequire(\"core-js/modules/es.array.map.js\");\nrequire(\"core-js/modules/es.array.filter.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/es.string.trim.js\");\nrequire(\"core-js/modules/es.array.concat.js\");\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\nvar _trim2 = _interopRequireDefault(require(\"lodash/trim\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar setXhrHeaders = function setXhrHeaders(formio, xhr) {\n  var headers = formio.options.headers;\n  if (headers) {\n    var ValidHeaders = {\n      'Content-Disposition': true,\n      'Authorization': true\n    };\n    for (var header in headers) {\n      if (ValidHeaders[header]) {\n        xhr.setRequestHeader(header, headers[header]);\n      }\n    }\n  }\n};\nexports.setXhrHeaders = setXhrHeaders;\nvar XHR = {\n  trim: function trim(text) {\n    return (0, _trim2.default)(text, '/');\n  },\n  path: function path(items) {\n    return items.filter(function (item) {\n      return !!item;\n    }).map(XHR.trim).join('/');\n  },\n  upload: function upload(formio, type, xhrCb, file, fileName, dir, progressCallback, groupPermissions, groupId, abortCallback) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      // Send the pre response to sign the upload.\n      var pre = new XMLHttpRequest(); // This only fires on a network error.\n\n      pre.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      };\n      pre.onabort = reject;\n      pre.onload = function () {\n        if (pre.status >= 200 && pre.status < 300) {\n          var response = JSON.parse(pre.response); // Send the file with data.\n\n          var xhr = new XMLHttpRequest();\n          if (typeof progressCallback === 'function') {\n            xhr.upload.onprogress = progressCallback;\n          }\n          if (typeof abortCallback === 'function') {\n            abortCallback(function () {\n              return xhr.abort();\n            });\n          }\n          xhr.openAndSetHeaders = function () {\n            xhr.open.apply(xhr, arguments);\n            setXhrHeaders(formio, xhr);\n          }; // Fire on network error.\n\n          xhr.onerror = function (err) {\n            err.networkError = true;\n            reject(err);\n          }; // Fire on network abort.\n\n          xhr.onabort = function (err) {\n            err.networkError = true;\n            reject(err);\n          }; // Fired when the response has made it back from the server.\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              resolve(response);\n            } else {\n              reject(xhr.response || 'Unable to upload file');\n            }\n          }; // Set the onabort error callback.\n\n          xhr.onabort = reject; // Get the request and send it to the server.\n\n          xhr.send(xhrCb(xhr, response));\n        } else {\n          reject(pre.response || 'Unable to sign file');\n        }\n      };\n      pre.open('POST', \"\".concat(formio.formUrl, \"/storage/\").concat(type));\n      pre.setRequestHeader('Accept', 'application/json');\n      pre.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n      var token = formio.getToken();\n      if (token) {\n        pre.setRequestHeader('x-jwt-token', token);\n      }\n      pre.send(JSON.stringify({\n        name: XHR.path([dir, fileName]),\n        size: file.size,\n        type: file.type,\n        groupPermissions: groupPermissions,\n        groupId: groupId\n      }));\n    });\n  }\n};\nvar _default = XHR;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","setXhrHeaders","default","require","_nativePromiseOnly","_interopRequireDefault","_trim2","obj","__esModule","formio","xhr","headers","options","ValidHeaders","header","setRequestHeader","XHR","trim","text","path","items","filter","item","map","join","upload","type","xhrCb","file","fileName","dir","progressCallback","groupPermissions","groupId","abortCallback","resolve","reject","pre","XMLHttpRequest","onerror","err","networkError","onabort","onload","status","response","JSON","parse","onprogress","abort","openAndSetHeaders","open","apply","arguments","send","concat","formUrl","token","getToken","stringify","name","size","_default"],"sources":["D:/task/node_modules/formiojs/providers/storage/xhr.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setXhrHeaders = exports.default = void 0;\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _trim2 = _interopRequireDefault(require(\"lodash/trim\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar setXhrHeaders = function setXhrHeaders(formio, xhr) {\n  var headers = formio.options.headers;\n\n  if (headers) {\n    var ValidHeaders = {\n      'Content-Disposition': true,\n      'Authorization': true\n    };\n\n    for (var header in headers) {\n      if (ValidHeaders[header]) {\n        xhr.setRequestHeader(header, headers[header]);\n      }\n    }\n  }\n};\n\nexports.setXhrHeaders = setXhrHeaders;\nvar XHR = {\n  trim: function trim(text) {\n    return (0, _trim2.default)(text, '/');\n  },\n  path: function path(items) {\n    return items.filter(function (item) {\n      return !!item;\n    }).map(XHR.trim).join('/');\n  },\n  upload: function upload(formio, type, xhrCb, file, fileName, dir, progressCallback, groupPermissions, groupId, abortCallback) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      // Send the pre response to sign the upload.\n      var pre = new XMLHttpRequest(); // This only fires on a network error.\n\n      pre.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      };\n\n      pre.onabort = reject;\n\n      pre.onload = function () {\n        if (pre.status >= 200 && pre.status < 300) {\n          var response = JSON.parse(pre.response); // Send the file with data.\n\n          var xhr = new XMLHttpRequest();\n\n          if (typeof progressCallback === 'function') {\n            xhr.upload.onprogress = progressCallback;\n          }\n\n          if (typeof abortCallback === 'function') {\n            abortCallback(function () {\n              return xhr.abort();\n            });\n          }\n\n          xhr.openAndSetHeaders = function () {\n            xhr.open.apply(xhr, arguments);\n            setXhrHeaders(formio, xhr);\n          }; // Fire on network error.\n\n\n          xhr.onerror = function (err) {\n            err.networkError = true;\n            reject(err);\n          }; // Fire on network abort.\n\n\n          xhr.onabort = function (err) {\n            err.networkError = true;\n            reject(err);\n          }; // Fired when the response has made it back from the server.\n\n\n          xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              resolve(response);\n            } else {\n              reject(xhr.response || 'Unable to upload file');\n            }\n          }; // Set the onabort error callback.\n\n\n          xhr.onabort = reject; // Get the request and send it to the server.\n\n          xhr.send(xhrCb(xhr, response));\n        } else {\n          reject(pre.response || 'Unable to sign file');\n        }\n      };\n\n      pre.open('POST', \"\".concat(formio.formUrl, \"/storage/\").concat(type));\n      pre.setRequestHeader('Accept', 'application/json');\n      pre.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n      var token = formio.getToken();\n\n      if (token) {\n        pre.setRequestHeader('x-jwt-token', token);\n      }\n\n      pre.send(JSON.stringify({\n        name: XHR.path([dir, fileName]),\n        size: file.size,\n        type: file.type,\n        groupPermissions: groupPermissions,\n        groupId: groupId\n      }));\n    });\n  }\n};\nvar _default = XHR;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}